*** Notes: 
1)Running the python scripts requires python 3.10. If you do not have this version, you will need to create a virtual environment for python 3.10 and install the required libraries using pip. 
2) all of the scripts are designed to access the cached models and metrics if they exist to avoid retraining every time the script is run. These caches are generated whenever a script is run with the relevant cached model/metrics missing. So, if for whatever reason you want to run these scripts from scratch (will take a long time) you can do so by deleting  everything in the directory except for your virtual environment, the 'smoke-fire' folder, and the python scripts
3) I cannot add the dataset folder to GitHub due to file size limits. The dataset can be found at:
https://www.kaggle.com/datasets/sayedgamal99/smoke-fire-detection-yolo
Download it as a .zip file, create a folder called "smoke-fire" inside "smoke-fire-detector", extract contents of .zip file into newly created folder. 


FinalProjectReport.pdf = pdf file for report

smoke-fire-detector = directory for code


inside smoke-fire-detector: 

	demo_output = folder containing demo images after running the scripts. When the script randomly chooses an 	image and runs prediction on it for the demo, it outputs the result to this folder

	hard_negatives = output folder for hard negatives when hard negative mining is run

	runs = various data generated by creating a model and training/testing it. This is a feature of the 	ultralytics library.

	smoke-fire = folder containing the dataset

	cached_****** = all of the cached models and metrics generated by the scripts when ran for the first time.

	CNN.py = the python script that loads/creates the baseline YOLOv8n model, then runs a demo.

	compareAll.py, compareBaselineEnsembled.py, countImages.py  = various scripts I used for the report and/or 	presentation

	ensembling_HN_CNN.py = script for system utilizing ensembling AND hard negative mining. This script also 	will generate all necessary models and metrics if ran from scratch, but the demo will use both ensembling 	and hard negative mining

	ensembling_CNN.py = script for system only utilizing ensembling.

	yolo**.pt = various YOLO models (I believe these are automatically generated as a feature of the 	ultralytics library)
